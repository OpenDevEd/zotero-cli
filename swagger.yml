openapi: 3.0.0
info:
  version: "1.0.1-oas3"
  title: Zotero API
  description: Zotero API
security:
  - UserSecurity: []
paths:
  '/{userOrGroup}/{id}/collections':
    get:
      description: Collections in the library
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: Successfully returned a list of collections
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
                  
  '/{userOrGroup}/{id}/collections/top':
    get:
      description: Top-level collections in the library
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
                  
  '/{userOrGroup}/{id}/collections/{key}':
    get:
      description: A specific collection in the library
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Collection'
                  
  '/{userOrGroup}/{id}/collections/{key}/collections':
    get:
      description: Subcollections within a specific collection in the library
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
  
  '/{userOrGroup}/{id}/items':
    get:
      description: All items in the library, excluding trashed items 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: Successfully returned a list of items
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                  
  '/{userOrGroup}/{id}/items/top':
    get:
      description: Top-level items in the library, excluding trashed items 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
                
  '/{userOrGroup}/{id}/items/trash':
    get:
      description: Items in the trash 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
                
  '/{userOrGroup}/{id}/items/{key}':
    get:
      description: A specific item in the library 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
                
  '/{userOrGroup}/{id}/items/{key}/children':
    get:
      description: Child items under a specific item 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'

  '/{userOrGroup}/{id}/publications/items':
    get:
      description: Items in My Publications  
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'

  '/{userOrGroup}/{id}/collections/{key}/items':
    get:
      description: Items within a specific collection in the library 
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

  '/{userOrGroup}/{id}/collections/{key}/items/top':
    get:
      description: Top-level items within a specific collection in the library
      parameters:
        - $ref: '#/components/parameters/UserOrGroup'
        - $ref: '#/components/parameters/UserOrGroupID'
        - $ref: '#/components/parameters/Key'
        - $ref: '#/components/parameters/APIVersion'
        - $ref: '#/components/parameters/APIKey'
      responses:
        '200':
          description: TODO
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'


servers:
  - url: 'https://api.zotero.org'

components:
  parameters:
    UserOrGroup:
      name: userOrGroup
      in: path
      required: true
      schema:
        type: string
        enum:
          - users
          - groups
    UserOrGroupID:
      name: id
      in: path
      required: true
      schema:
        type: string
    Key:
      name: key
      in: path
      required: true
      schema: { type: string }
    APIVersion:
      name: Zotero-API-Version
      in: header
      required: true
      schema:
        type: string
        enum: ['3']
    APIKey:
      name: Zotero-API-Key
      in: header
      schema:
        type: string
  securitySchemes:
    UserSecurity:
      type: http
      scheme: basic

  schemas:
    Item:
      type: object
      
    Collection:
      type: object
      properties:
        key: { type: string }
        version: { type: string }
        library:
          type: object
          properties:
            type: { type: string, enum: ['user', 'group' ] }
            id: { type: integer }
            name: { type: string }
            links:
              type: object
              properties:
                alternate:
                  type: object
                  properties:
                    href: { type: string }
                    type: { type: string }